import { Injectable } from '@angular/core';

//Firebase Imports
import { AngularFireDatabase, FirebaseListObservable, FirebaseObjectObservable } from 'angularfire2/database';
import { AngularFireAuth } from 'angularfire2/auth';
import * as firebase from 'firebase/app';

//Model imports
import { Quiz } from './models/quiz.model';
import { QuizQuestion } from './models/quiz-question.model';

@Injectable()
export class QuizService {
  auth: firebase.auth.Auth;
  //Access the user table and user list
  userTable: firebase.database.Reference;
  listOfUsers: FirebaseListObservable<any>;
  //access the question table and list of questions
  questionTable: firebase.database.Reference;
  listOfQuestions: FirebaseListObservable<any>;

  listOfQuizzes: FirebaseListObservable<any>;

  constructor(public db: AngularFireDatabase, public afAuth: AngularFireAuth) {
    this.auth = afAuth.auth;

    this.userTable = firebase.database().ref('users');
    this.listOfUsers = db.list('/users');

    this.questionTable = firebase.database().ref('questions');
    this.listOfQuestions = db.list('/questions');





  }

  generateQuizzes(userKey) {
    //Grab the currently logged in user
    var currentActiveUser = firebase.database().ref('users/' + userKey);
    console.log(currentActiveUser);

    //Grab a list of all questions in the database and subscribe so we can interact with it
    var questionList = this.listOfQuestions.subscribe(list => {
      return questionList = list;
    });

    //wait for questionList to populate and iterate through each of its questions to create objects
    setTimeout(x => {
      //Create quizArray to store key/value pairs of keys|Quizzes
      var quizArray: Array<any> = [];

      //Create keyArray to store all previously generated keys and prevent duplicate entries
      var keyArray = [];

      //Loop through questionList and for each question in the database....
      for (var question of questionList) {

        //Create the key to be used to validate whether or not a quiz already exists
        var key = this.createQuizKey(question.week, question.day);

        //If the keyArray does not include the key...
        if (!keyArray.includes(key)) {

          // push it to key array so it won't be duplicated in the future...
          keyArray.push(key);

          //create a new Quiz(completed = false)...
          var newQuiz = new Quiz(false);

          //add the current 'question' to newQuiz...
          this.addQuestionKey(newQuiz, question.$key);
          //add key and newQuiz to their own little array...
          var tempArray = this.createTempArray(key, newQuiz);
          //push the newly created array to quizArray for use later!
          quizArray.push(tempArray);
          //nice

          //If the keyArray contains the current key, add it to the corresponding quiz
        } else {
          //Loop through quizArray and find the index that === the corresponding key|quiz pair...
          for (var i = 0; i < quizArray.length; i++) {

            //check every index's first sub-index for equality
            if (quizArray[i][0] === key) {

              //When a match is found, grab the current "question"'s .$key to add to the corresponding quiz
              this.addQuestionKey(quizArray[i][1], question.$key);
            }
          }
        }
      }

      //Use the addAllQuizzesToUser to create one big quiz that contains the values of each quiz|key pair in quizArray
      var allQuizzesWithQuestions = this.addAllQuizzesToUser(quizArray);
      console.log(allQuizzesWithQuestions);
      //grab the current user, go to their 'quizzes' "Table" and add each key|quiz pair from allQuizzesWithQuestions
      currentActiveUser.child('quizzes').set(allQuizzesWithQuestions);
    }, 1500);
  }

  // Create an array with the key generated by 'createQuizKey()', as well as a Quiz object
  createTempArray(key, newQuiz) {
    // create a 2 index array that will be used as a key|value pair.
    var tempArray: (string | Quiz)[] = [key, newQuiz];
    //return it for later use
    return tempArray;
  }

  //create descriptive keys by taking a 'question' from questionList and grabbing it's week and day values
  createQuizKey(week, day) {
    var key = "week-" + week + '-day-' + day;
    //ex. 'week-2-quiz-1'
    //returns for later use
    return key;
  }

  //create readable question numbers by taking in a Quiz, getting it's # of keys (1 by default, but this makes the code easily adjustable if more keys are added to the Quiz object)
  addQuestionKey(targetQuiz: Quiz, key) {
    //generate a human-readable key for firebase
    //ex. 'question-3'
    var quizQuestionNumber = "question" + Object.keys(targetQuiz).length;
    //quiz question hold the firebase id of a 'question' and stores it here for use with 'findById' method
    var newQuizQuestion = new QuizQuestion(key);
    // takes the inputted Quiz and gives it a new key|value pair
    //ex Quiz{completed: false, question-1: -KoVPKkeJWXw5_4secym}
    targetQuiz[quizQuestionNumber] = newQuizQuestion;
  }

  //Input an array..
  addAllQuizzesToUser(quizArray) {
    //Create a quiz object with a 'null' 'complete:' value. (Firebase automatically ignores null values. No need to create a new model just for this!)
    var newQuizList = new Quiz(null);

    // for each sub array (key|quiz pair) in quizArray...
    for (var idQuizPair of quizArray) {
      //add a new key to newQuizList and set it's value to the corresponding Quiz
      newQuizList[idQuizPair[0]] = idQuizPair[1];
    }
    //return the newQuizList: Quiz object to send to the database
    return newQuizList;
  }



  shuffle(array) {
    var m = array.length, t, i;

    // While there remain elements to shuffle…
    while (m) {

      // Pick a remaining element…
      i = Math.floor(Math.random() * m--);

      // And swap it with the current element.
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }

    return array;
  }

  getCurrentUserQuizList(userKey) {
    this.listOfQuizzes = this.db.list('users/' + userKey + '/quizzes');
    return this.listOfQuizzes;

  }

  startSelectedQuiz(userKey, quizKey) {

    var questionTitleArray: Array<string> = [];
    var questionKeyArray: Array<string> = [];

    var foundQuiz = this.db.object('users/' + userKey + '/quizzes/' + quizKey);

    var quizAfterSubscribe;
    foundQuiz.subscribe(quiz => {
      quizAfterSubscribe = quiz;
    });

    for (var question in quizAfterSubscribe) {
      if (question === "complete") {
        //Do nothing
      } else {
        questionTitleArray.push(question);
        var tempQuestion = this.db.object('users/' + userKey + '/quizzes/' + quizKey + '/' + question);
        tempQuestion.subscribe(q => {
          questionKeyArray.push(q.id);
        })
      }
    }
    return questionKeyArray;
  }

  getQuestionByKey(key) {
    return this.db.object('questions/' + key);
  }

  updateQuestionAnswerAndScore(quizKey: string, result: Array<QuizQuestion>) {
    var user = this.auth.currentUser.uid;
    var foundQuiz = this.db.object('users/' + user + '/quizzes/' + quizKey);
    var numberOfQuestions = result.length;
    var correctAnswers: number = 0;
    
    var quizAfterSubscribe: Object;

    foundQuiz.subscribe(quiz => {
      quizAfterSubscribe = quiz;
    });

    console.log(quizAfterSubscribe);

    var questionTitleArray = [];

    for (var question in quizAfterSubscribe) {
      if (question === "complete") {
        //Do nothing
      } else {

        questionTitleArray.push(question);

        var tempQuestion = this.db.object('users/' + user + '/quizzes/' + quizKey + '/' + question);

        tempQuestion.subscribe(q => {

          for (var i = 0; i < result.length; i++) {

            if (result[i].correct === true) {
              console.log(result[i].correct)
             return correctAnswers++;
            }


            if (q.id === result[i].id) {
              firebase.database().ref('users/' + user + '/quizzes/' + quizKey).child(question).set(result[i]);
              return;
            }
          }
        });
      }
    }
    var quizScore = correctAnswers / numberOfQuestions;
    console.log(quizScore);
    firebase.database().ref('users/' + user + '/quizzes/' + quizKey).child("score").set(quizScore)
  }
}
